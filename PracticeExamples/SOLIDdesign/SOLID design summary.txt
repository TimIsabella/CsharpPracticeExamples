S. Single Responsibility
   - Make things (classes, functions, etc.) responsible for fulfilling one type of role.
   -- Refactor code responsibilities into separate classes.

O. Open/Closed
   - Be able to add new functionality to existing code easily without modifying existing code.
   -- Use abstract classes. These can define what subclasses will require and strengthen Principle 1. by separating code duties.

L. Liskov Substitution
   - When a class inherits from another class, the program shouldn't break and you shouldn't need to hack anything to use the subclass.
   -- Define constructor arguments to keep inheritance flexible.

I. Interface Segregation
   - Make interfaces (parent abstract classes) more specific, rather than generic.
   -- Create more interfaces (classes) if needed and/or provide objects to constructors.

D. Dependency Inversion
   - Make classes depend on abstract classes rather than non-abstract classes.
   -- Make classes inherit from abstract classes.